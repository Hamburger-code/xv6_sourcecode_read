---- wait Matches (99 in 23 files) ----
brelse in bio.c (kernel) : 
  if (b->refcnt == 0) {
    // no one is waiting for it.
    b->next->prev = b->prev;
    b->prev->next = b->next;
    b->next = bcache.head.next;
consoleread in console.c (kernel) : 
  while(n > 0){
    // wait until interrupt handler has put some
    // input into cons.buffer.
    while(cons.r == cons.w){
      if(killed(myproc())){
defs.h (kernel) line 102 : 
void            userinit(void);
int             wait(uint64);
void            wakeup(void*);
void            yield(void);
int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
forktest in forktest.c (user) : 
  for(; n > 0; n--){
    if(wait(0) < 0){
      print("wait stopped early\n");
      exit(1);
    }
  }

  if(wait(0) != -1){
    print("wait got too many\n");
    exit(1);
  }

go in grind.c (user) : 
      }
      wait(0);
    } else if(what == 14){
      int pid = fork();
      if(pid == 0){
go in grind.c (user) : 
      }
      wait(0);
    } else if(what == 15){
      sbrk(6011);
    } else if(what == 16){
go in grind.c (user) : 
      kill(pid);
      wait(0);
    } else if(what == 18){
      int pid = fork();
      if(pid == 0){
go in grind.c (user) : 
      }
      wait(0);
    } else if(what == 19){
      int fds[2];
      if(pipe(fds) < 0){
go in grind.c (user) : 
      close(fds[1]);
      wait(0);
    } else if(what == 20){
      int pid = fork();
      if(pid == 0){
go in grind.c (user) : 
      }
      wait(0);
    } else if(what == 21){
      unlink("c");
      // should always succeed. check that there are free i-nodes,
go in grind.c (user) : 
      int st1, st2;
      wait(&st1);
      wait(&st2);
      if(st1 != 0 || st2 != 0 || strcmp(buf, "hi\n") != 0){
        printf("grind: exec pipeline failed %d %d \"%s\"\n", st1, st2, buf);
        exit(1);
iter in grind.c (user) : 
  int st1 = -1;
  wait(&st1);
  if(st1 != 0){
    kill(pid1);
    kill(pid2);
iter in grind.c (user) : 
  int st2 = -1;
  wait(&st2);

  exit(0);
}
main in grind.c (user) : 
    if(pid > 0){
      wait(0);
    }
    sleep(20);
    rand_next += 1;
main in init.c (user) : 
    for(;;){
      // this call to wait() returns if the shell exits,
      // or if a parentless process exits.
      wpid = wait((int *) 0);
      if(wpid == pid){
        // the shell exited; restart it.
        break;
      } else if(wpid < 0){
        printf("init: wait returned an error\n");
        exit(1);
      } else {
        // it was a parentless process; do nothing.
log in log.c (kernel) : 
  int outstanding; // how many FS sys calls are executing.
  int committing;  // in commit(), please wait.
  int dev;
  struct logheader lh;
};
begin_op in log.c (kernel) : 
    } else if(log.lh.n + (log.outstanding+1)*MAXOPBLOCKS > LOGSIZE){
      // this op might exhaust log space; wait for commit.
      sleep(&log, &log.lock);
    } else {
      log.outstanding += 1;
end_op in log.c (kernel) : 
  } else {
    // begin_op() may be waiting for log space,
    // and decrementing log.outstanding has decreased
    // the amount of reserved space.
    wakeup(&log);
main in pingpong.c (Hamburge_code) : 
		//等待子进程结束
		int endcpid = wait(status_c);//status_c返回的是一个状态码,子进程使用exit(num),如果顺利,那么，返回的就是num
		printf("end_subprocess_pid: %d, status: 0x%x\n", endcpid, *status_c);
		exit(0);
	}
pingpong.c (Hamburge_code) line 174 : 
		printf("%d: received pong \n", cur_pid);
		wait(0);
		exit(0);
	}
	else {
proc.c (kernel) line 22 : 

// helps ensure that wakeups of wait()ing
// parents are not lost. helps obey the
// memory model when using p->parent.
// must be acquired before any p->lock.
struct spinlock wait_lock;

// Allocate a page for each process's kernel stack.
// Map it high in memory, followed by an invalid
procinit in proc.c (kernel) : 
  initlock(&pid_lock, "nextpid");
  initlock(&wait_lock, "wait_lock");
  for(p = proc; p < &proc[NPROC]; p++) {
      initlock(&p->lock, "proc");
      p->state = UNUSED;
fork in proc.c (kernel) : 

  acquire(&wait_lock);
  np->parent = p;
  release(&wait_lock);

  acquire(&np->lock);
  np->state = RUNNABLE;
proc.c (kernel) line 328 : 
// Pass p's abandoned children to init.
// Caller must hold wait_lock.
void
reparent(struct proc *p)
{
proc.c (kernel) line 344 : 
// An exited process remains in the zombie state
// until its parent calls wait().
void
exit(int status)
{
exit in proc.c (kernel) : 

  acquire(&wait_lock);

  // Give any children to init.
  reparent(p);

  // Parent might be sleeping in wait().
  wakeup(p->parent);
  
  acquire(&p->lock);
exit in proc.c (kernel) : 

  release(&wait_lock);

  // Jump into the scheduler, never to return.
  sched();
proc.c (kernel) line 387 : 

// Wait for a child process to exit and return its pid.
// Return -1 if this process has no children.
int
wait(uint64 addr)
{
  struct proc *pp;
  int havekids, pid;
wait in proc.c (kernel) : 

  acquire(&wait_lock);

  for(;;){
    // Scan through table looking for exited children.
wait in proc.c (kernel) : 
            release(&pp->lock);
            release(&wait_lock);
            return -1;
          }
          freeproc(pp);
          release(&pp->lock);
          release(&wait_lock);
          return pid;
        }
        release(&pp->lock);
wait in proc.c (kernel) : 

    // No point waiting if we don't have any children.
    if(!havekids || killed(p)){
      release(&wait_lock);
      return -1;
    }
    
    // Wait for a child to exit.
    sleep(p, &wait_lock);  //DOC: wait-sleep
  }
}

scheduler in proc.c (kernel) : 
    // turned off; enable them to avoid a deadlock if all
    // processes are waiting.
    intr_on();

    int found = 0;
proc in proc.h (kernel) : 
  int killed;                  // If non-zero, have been killed
  int xstate;                  // Exit status to be returned to parent's wait
  int pid;                     // Process ID

  // wait_lock must be held when using this:
  struct proc *parent;         // Parent process

  // these are private to the process, so p->lock need not be held.
runcmd in sh.c (user) : 
      runcmd(lcmd->left);
    wait(0);
    runcmd(lcmd->right);
    break;

runcmd in sh.c (user) : 
    close(p[1]);
    wait(0);
    wait(0);
    break;

  case BACK:
main in sh.c (user) : 
      runcmd(parsecmd(buf));//执行对应命令，写的比较底层复杂，先不深究原因
    wait(0);//等待任意一个子进程结束
  }
  exit(0);//系统调用，直接终止程序执行
}
main in stressfs.c (user) : 

  wait(0);

  exit(0);
}
syscall.c (kernel) line 84 : 
extern uint64 sys_exit(void);
extern uint64 sys_wait(void);
extern uint64 sys_pipe(void);
extern uint64 sys_read(void);
extern uint64 sys_kill(void);
syscall.c (kernel) line 109 : 
[SYS_exit]    sys_exit,
[SYS_wait]    sys_wait,
[SYS_pipe]    sys_pipe,
[SYS_read]    sys_read,
[SYS_kill]    sys_kill,
syscall.h (kernel) line 3 : 
#define SYS_exit    2
#define SYS_wait    3
#define SYS_pipe    4
#define SYS_read    5
#define SYS_kill    6
sysproc.c (kernel) line 30 : 
uint64
sys_wait(void)
{
  uint64 p;
  argaddr(0, &p);
  return wait(p);
}

uint64
trampoline.S (kernel) line 86 : 

        # wait for any previous memory operations to complete, so that
        # they use the user page table.
        sfence.vma zero, zero

uart.c (kernel) line 34 : 
#define LSR 5                 // line status register
#define LSR_RX_READY (1<<0)   // input is waiting to be read from RHR
#define LSR_TX_IDLE (1<<5)    // THR can accept another character to send

#define ReadReg(reg) (*(Reg(reg)))
uartputc in uart.c (kernel) : 
    // buffer is full.
    // wait for uartstart() to open up space in the buffer.
    sleep(&uart_tx_r, &uart_tx_lock);
  }
  uart_tx_buf[uart_tx_w % UART_TX_BUF_SIZE] = c;
uart.c (kernel) line 108 : 
// use interrupts, for use by kernel printf() and
// to echo characters. it spins waiting for the uart's
// output register to be empty.
void
uartputc_sync(int c)
uartputc_sync in uart.c (kernel) : 

  // wait for Transmit Holding Empty to be set in LSR.
  while((ReadReg(LSR) & LSR_TX_IDLE) == 0)
    ;
  WriteReg(THR, c);
uart.c (kernel) line 128 : 

// if the UART is idle, and a character is waiting
// in the transmit buffer, send it.
// caller must hold uart_tx_lock.
// called from both the top- and bottom-half.
uartstart in uart.c (kernel) : 
    
    // maybe uartputc() is waiting for space in the buffer.
    wakeup(&uart_tx_r);
    
    WriteReg(THR, c);
uart.c (kernel) line 160 : 
// read one input character from the UART.
// return -1 if none is waiting.
int
uartgetc(void)
{
user.h (user) line 5 : 
int exit(int) __attribute__((noreturn));
int wait(int*);
int pipe(int*);
int write(int, const void*, int);//const void* 表示一个任何类型的常量指针，该指针指向一个常量
int read(int, void*, int);
copyinstr2 in usertests.c (user) : 
  int st = 0;
  wait(&st);
  if(st != 747){
    printf("exec(echo, BIG) succeeded, should have failed\n");
    exit(1);
truncate3 in usertests.c (user) : 

  wait(&xstatus);
  unlink("truncfile");
  exit(xstatus);
}
exitiputtest in usertests.c (user) : 
  }
  wait(&xstatus);
  exit(xstatus);
}

openiputtest in usertests.c (user) : 
  }
  wait(&xstatus);
  exit(xstatus);
}

exectest in usertests.c (user) : 
  }
  if (wait(&xstatus) != pid) {
    printf("%s: wait failed!\n", s);
  }
  if(xstatus != 0)
    exit(xstatus);
pipe1 in usertests.c (user) : 
    close(fds[0]);
    wait(&xstatus);
    exit(xstatus);
  } else {
    printf("%s: fork() failed\n", s);
killstatus in usertests.c (user) : 
    kill(pid1);
    wait(&xst);
    if(xst != -1) {
       printf("%s: status should be -1\n", s);
       exit(1);
preempt in usertests.c (user) : 
  kill(pid3);
  printf("wait... ");
  wait(0);
  wait(0);
  wait(0);
}

// try to find any races between exit and wait
void
exitwait(char *s)
{
exitwait in usertests.c (user) : 
      int xstate;
      if(wait(&xstate) != pid){
        printf("%s: wait wrong pid\n", s);
        exit(1);
      }
      if(i != xstate) {
        printf("%s: wait wrong exit status\n", s);
        exit(1);
      }
    } else {
reparent in usertests.c (user) : 
    if(pid){
      if(wait(0) != pid){
        printf("%s: wait wrong pid\n", s);
        exit(1);
      }
    } else {
twochildren in usertests.c (user) : 
      } else {
        wait(0);
        wait(0);
      }
    }
  }
forkfork in usertests.c (user) : 
        }
        wait(0);
      }
      exit(0);
    }
forkfork in usertests.c (user) : 
  for(int i = 0; i < N; i++){
    wait(&xstatus);
    if(xstatus != 0) {
      printf("%s: fork in child failed", s);
      exit(1);
forkforkfork in usertests.c (user) : 
  close(open("stopforking", O_CREATE|O_RDWR));
  wait(0);
  sleep(10); // one second
}

usertests.c (user) line 1031 : 
// locking order when giving away a child to init, so that exit()
// deadlocks against init's wait()? also used to trigger a "panic:
// release" due to exit() releasing a different p->parent->lock than
// it acquired.
void
reparent2 in usertests.c (user) : 
    }
    wait(0);
  }

  exit(0);
mem in usertests.c (user) : 
    int xstatus;
    wait(&xstatus);
    if(xstatus == -1){
      // probably page fault, so might be lazy lab,
      // so OK.
sharedfd in usertests.c (user) : 
    int xstatus;
    wait(&xstatus);
    if(xstatus != 0)
      exit(xstatus);
  }
fourfiles in usertests.c (user) : 
  for(pi = 0; pi < NCHILD; pi++){
    wait(&xstatus);
    if(xstatus != 0)
      exit(xstatus);
  }
createdelete in usertests.c (user) : 
  for(pi = 0; pi < NCHILD; pi++){
    wait(&xstatus);
    if(xstatus != 0)
      exit(1);
  }
concreate in usertests.c (user) : 
      int xstatus;
      wait(&xstatus);
      if(xstatus != 0)
        exit(1);
    }
concreate in usertests.c (user) : 
    else
      wait(0);
  }
}

linkunlink in usertests.c (user) : 
  if(pid)
    wait(0);
  else
    exit(0);
}
forktest in usertests.c (user) : 
  for(; n > 0; n--){
    if(wait(0) < 0){
      printf("%s: wait stopped early\n", s);
      exit(1);
    }
  }

  if(wait(0) != -1){
    printf("%s: wait got too many\n", s);
    exit(1);
  }
}
sbrkbasic in usertests.c (user) : 

  wait(&xstatus);
  if(xstatus == 1){
    printf("%s: too much memory allocated!\n", s);
    exit(1);
sbrkbasic in usertests.c (user) : 
    exit(0);
  wait(&xstatus);
  exit(xstatus);
}

kernmem in usertests.c (user) : 
    int xstatus;
    wait(&xstatus);
    if(xstatus != -1)  // did kernel kill child?
      exit(1);
  }
MAXVAplus in usertests.c (user) : 
    int xstatus;
    wait(&xstatus);
    if(xstatus != -1)  // did kernel kill child?
      exit(1);
  }
sbrkfail in usertests.c (user) : 
    kill(pids[i]);
    wait(0);
  }
  if(c == (char*)0xffffffffffffffffL){
    printf("%s: failed sbrk leaked memory\n", s);
sbrkfail in usertests.c (user) : 
  }
  wait(&xstatus);
  if(xstatus != -1 && xstatus != 2)
    exit(1);
}
bigargtest in usertests.c (user) : 
  
  wait(&xstatus);
  if(xstatus != 0)
    exit(xstatus);
  fd = open("bigarg-ok", 0);
stacktest in usertests.c (user) : 
  }
  wait(&xstatus);
  if(xstatus == -1)  // kernel killed child?
    exit(0);
  else
nowrite in usertests.c (user) : 
    }
    wait(&xstatus);
    if(xstatus == 0){
      // kernel did not kill child!
      exit(1);
sbrkbugs in usertests.c (user) : 
  }
  wait(0);

  pid = fork();
  if(pid < 0){
sbrkbugs in usertests.c (user) : 
  }
  wait(0);

  pid = fork();
  if(pid < 0){
sbrkbugs in usertests.c (user) : 
  }
  wait(0);

  exit(0);
}
manywrites in usertests.c (user) : 
    int st = 0;
    wait(&st);
    if(st != 0)
      exit(st);
  }
execout in usertests.c (user) : 
    } else {
      wait((int*)0);
    }
  }

run in usertests.c (user) : 
  } else {
    wait(&xstatus);
    if(xstatus != 0) 
      printf("FAILED\n");
    else
countfree in usertests.c (user) : 
  close(fds[0]);
  wait((int*)0);
  
  return n;
}
usys.pl (user) line 19 : 
entry("exit");
entry("wait");
entry("pipe");
entry("read");
entry("write");
virtio_disk_rw in virtio_disk.c (kernel) : 

  // Wait for virtio_disk_intr() to say request has finished.
  while(b->disk == 1) {
    sleep(b, &disk.vdisk_lock);
  }
kvminithart in vm.c (kernel) : 
{
  // wait for any previous writes to the page table memory to finish.
  sfence_vma();

  w_satp(MAKE_SATP(kernel_pagetable));
xv6_sourcecode_report (xv6_sourcecode.si4project) line 173 : 
    virtio_disk_rw                                                                      (Function Prototype at line 185-185)
    wait                                                                                (Function Prototype at line 103-103)
    wakeup                                                                              (Function Prototype at line 104-104)
    walk                                                                                (Function Prototype at line 171-171)
    walkaddr                                                                            (Function Prototype at line 172-172)
xv6_sourcecode_report (xv6_sourcecode.si4project) line 960 : 
    userinit                                                                            (Function at line 232-254)
    wait                                                                                (Function at line 390-434)
    wait_lock                                                                           (Variable at line 27-27)
    wakeup                                                                              (Function at line 578-591)
    yield                                                                               (Function at line 511-518)
proc.h (kernel)                                                                           3482        -    107      2024/9/5
xv6_sourcecode_report (xv6_sourcecode.si4project) line 1319 : 
    sys_uptime                                                                          (Function Prototype at line 96-96)
    sys_wait                                                                            (Function Prototype at line 85-85)
    sys_write                                                                           (Function Prototype at line 98-98)
syscall.h (kernel)                                                                         485        -     22      2024/9/5
    SYS_chdir                                                                           (Constant at line 10-10)
xv6_sourcecode_report (xv6_sourcecode.si4project) line 1341 : 
    SYS_uptime                                                                          (Constant at line 15-15)
    SYS_wait                                                                            (Constant at line 4-4)
    SYS_write                                                                           (Constant at line 17-17)
sysfile.c (kernel)                                                                        8488        -    505      2024/9/5
    argfd                                                                               (Function at line 21-34)
xv6_sourcecode_report (xv6_sourcecode.si4project) line 1369 : 
    sys_uptime                                                                          (Function at line 84-92)
    sys_wait                                                                            (Function at line 30-35)
trampoline.S (kernel)                                                                     3854        -    151      2024/9/5
    Parse Too complex in trampolineS (kernel)                                          (Parsing Error at line 1-151)
trap.c (kernel)                                                                           5310        -    218      2024/9/5
xv6_sourcecode_report (xv6_sourcecode.si4project) line 1487 : 
    uptime                                                                              (Function Prototype at line 24-24)
    wait                                                                                (Function Prototype at line 6-6)
    write                                                                               (Function Prototype at line 8-8)
usertests.c (user)                                                                       62695        -   3118      2024/9/5
    argptest                                                                            (Function at line 2394-2403)
